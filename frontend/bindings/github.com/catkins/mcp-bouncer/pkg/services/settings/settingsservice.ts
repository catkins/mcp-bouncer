// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT

/**
 * SettingsService handles loading and saving application settings
 * @module
 */

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import { Call as $Call, CancellablePromise as $CancellablePromise, Create as $Create } from "@wailsio/runtime";

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as $models from "./models.js";

/**
 * AddMCPServer adds a new MCP server configuration
 */
export function AddMCPServer(config: $models.MCPServerConfig): $CancellablePromise<void> {
    return $Call.ByID(432659599, config);
}

/**
 * ClearCallbacks removes all callbacks
 */
export function ClearCallbacks(): $CancellablePromise<void> {
    return $Call.ByID(2853322270);
}

/**
 * GetAutoStart returns the current auto-start setting
 */
export function GetAutoStart(): $CancellablePromise<boolean> {
    return $Call.ByID(3682909572);
}

/**
 * GetCallbackCount returns the number of registered callbacks
 */
export function GetCallbackCount(): $CancellablePromise<number> {
    return $Call.ByID(305217891);
}

/**
 * GetEnabledMCPServers returns only enabled MCP server configurations
 */
export function GetEnabledMCPServers(): $CancellablePromise<$models.MCPServerConfig[]> {
    return $Call.ByID(1333703972).then(($result: any) => {
        return $$createType1($result);
    });
}

/**
 * GetListenAddr returns the current listen address
 */
export function GetListenAddr(): $CancellablePromise<string> {
    return $Call.ByID(3810199039);
}

/**
 * GetMCPServers returns all MCP server configurations
 */
export function GetMCPServers(): $CancellablePromise<$models.MCPServerConfig[]> {
    return $Call.ByID(110473967).then(($result: any) => {
        return $$createType1($result);
    });
}

/**
 * GetSettings returns the current settings
 */
export function GetSettings(): $CancellablePromise<$models.Settings | null> {
    return $Call.ByID(3771855470).then(($result: any) => {
        return $$createType3($result);
    });
}

/**
 * Load loads settings from file
 */
export function Load(): $CancellablePromise<void> {
    return $Call.ByID(278043373);
}

/**
 * OpenConfigDirectory opens the config directory in the platform's file manager
 */
export function OpenConfigDirectory(): $CancellablePromise<void> {
    return $Call.ByID(1956635494);
}

/**
 * RemoveMCPServer removes an MCP server configuration by name
 */
export function RemoveMCPServer(name: string): $CancellablePromise<void> {
    return $Call.ByID(3969257380, name);
}

/**
 * Save saves settings to file
 */
export function Save(): $CancellablePromise<void> {
    return $Call.ByID(1225245988);
}

/**
 * SetAutoStart updates the auto-start setting
 */
export function SetAutoStart(autoStart: boolean): $CancellablePromise<void> {
    return $Call.ByID(3355420536, autoStart);
}

/**
 * SetListenAddr updates the listen address
 */
export function SetListenAddr(addr: string): $CancellablePromise<void> {
    return $Call.ByID(1596924355, addr);
}

/**
 * Subscribe sets the event callback
 */
export function Subscribe(callback: any): $CancellablePromise<void> {
    return $Call.ByID(3073316407, callback);
}

/**
 * Unsubscribe removes a callback from the list of callbacks
 * Note: This removes the first matching callback. If you have multiple identical callbacks,
 * you may need to call this multiple times.
 */
export function Unsubscribe(callback: any): $CancellablePromise<void> {
    return $Call.ByID(1872502362, callback);
}

/**
 * UpdateMCPServer updates an existing MCP server configuration
 */
export function UpdateMCPServer(name: string, config: $models.MCPServerConfig): $CancellablePromise<void> {
    return $Call.ByID(2123139479, name, config);
}

/**
 * UpdateSettings updates the settings and saves them
 */
export function UpdateSettings(settings: $models.Settings | null): $CancellablePromise<void> {
    return $Call.ByID(3533970109, settings);
}

// Private type creation functions
const $$createType0 = $models.MCPServerConfig.createFrom;
const $$createType1 = $Create.Array($$createType0);
const $$createType2 = $models.Settings.createFrom;
const $$createType3 = $Create.Nullable($$createType2);
