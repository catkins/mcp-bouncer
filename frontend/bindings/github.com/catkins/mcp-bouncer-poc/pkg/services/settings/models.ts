// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import { Create as $Create } from "@wailsio/runtime";

/**
 * MCPServerConfig represents configuration for a single MCP server
 */
export class MCPServerConfig {
    "name": string;
    "description": string;
    "command": string;
    "args"?: string[];
    "env"?: { [_: string]: string };
    "enabled": boolean;

    /** Creates a new MCPServerConfig instance. */
    constructor($$source: Partial<MCPServerConfig> = {}) {
        if (!("name" in $$source)) {
            this["name"] = "";
        }
        if (!("description" in $$source)) {
            this["description"] = "";
        }
        if (!("command" in $$source)) {
            this["command"] = "";
        }
        if (!("enabled" in $$source)) {
            this["enabled"] = false;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new MCPServerConfig instance from a string or object.
     */
    static createFrom($$source: any = {}): MCPServerConfig {
        const $$createField3_0 = $$createType0;
        const $$createField4_0 = $$createType1;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("args" in $$parsedSource) {
            $$parsedSource["args"] = $$createField3_0($$parsedSource["args"]);
        }
        if ("env" in $$parsedSource) {
            $$parsedSource["env"] = $$createField4_0($$parsedSource["env"]);
        }
        return new MCPServerConfig($$parsedSource as Partial<MCPServerConfig>);
    }
}

/**
 * Settings represents the application settings
 */
export class Settings {
    "mcp_servers": MCPServerConfig[];
    "listen_addr": string;
    "auto_start": boolean;

    /** Creates a new Settings instance. */
    constructor($$source: Partial<Settings> = {}) {
        if (!("mcp_servers" in $$source)) {
            this["mcp_servers"] = [];
        }
        if (!("listen_addr" in $$source)) {
            this["listen_addr"] = "";
        }
        if (!("auto_start" in $$source)) {
            this["auto_start"] = false;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new Settings instance from a string or object.
     */
    static createFrom($$source: any = {}): Settings {
        const $$createField0_0 = $$createType3;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("mcp_servers" in $$parsedSource) {
            $$parsedSource["mcp_servers"] = $$createField0_0($$parsedSource["mcp_servers"]);
        }
        return new Settings($$parsedSource as Partial<Settings>);
    }
}

// Private type creation functions
const $$createType0 = $Create.Array($Create.Any);
const $$createType1 = $Create.Map($Create.Any, $Create.Any);
const $$createType2 = MCPServerConfig.createFrom;
const $$createType3 = $Create.Array($$createType2);
