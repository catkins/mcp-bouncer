// @ts-check
// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT

/**
 * SettingsService handles loading and saving application settings
 * @module
 */

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import { Call as $Call, CancellablePromise as $CancellablePromise, Create as $Create } from "@wailsio/runtime";

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as $models from "./models.js";

/**
 * AddMCPServer adds a new MCP server configuration
 * @param {$models.MCPServerConfig} config
 * @returns {$CancellablePromise<void>}
 */
export function AddMCPServer(config) {
    return $Call.ByID(4149364466, config);
}

/**
 * GetAutoStart returns the current auto-start setting
 * @returns {$CancellablePromise<boolean>}
 */
export function GetAutoStart() {
    return $Call.ByID(2395191109);
}

/**
 * GetEnabledMCPServers returns only enabled MCP server configurations
 * @returns {$CancellablePromise<$models.MCPServerConfig[]>}
 */
export function GetEnabledMCPServers() {
    return $Call.ByID(1830973517).then(/** @type {($result: any) => any} */(($result) => {
        return $$createType1($result);
    }));
}

/**
 * GetListenAddr returns the current listen address
 * @returns {$CancellablePromise<string>}
 */
export function GetListenAddr() {
    return $Call.ByID(3860168892);
}

/**
 * GetMCPServers returns all MCP server configurations
 * @returns {$CancellablePromise<$models.MCPServerConfig[]>}
 */
export function GetMCPServers() {
    return $Call.ByID(3678967588).then(/** @type {($result: any) => any} */(($result) => {
        return $$createType1($result);
    }));
}

/**
 * GetSettings returns the current settings
 * @returns {$CancellablePromise<$models.Settings | null>}
 */
export function GetSettings() {
    return $Call.ByID(3179274181).then(/** @type {($result: any) => any} */(($result) => {
        return $$createType3($result);
    }));
}

/**
 * Load loads settings from file
 * @returns {$CancellablePromise<void>}
 */
export function Load() {
    return $Call.ByID(304518192);
}

/**
 * RemoveMCPServer removes an MCP server configuration by name
 * @param {string} name
 * @returns {$CancellablePromise<void>}
 */
export function RemoveMCPServer(name) {
    return $Call.ByID(1859398459, name);
}

/**
 * Save saves settings to file
 * @returns {$CancellablePromise<void>}
 */
export function Save() {
    return $Call.ByID(1615091017);
}

/**
 * SetAutoStart updates the auto-start setting
 * @param {boolean} autoStart
 * @returns {$CancellablePromise<void>}
 */
export function SetAutoStart(autoStart) {
    return $Call.ByID(3025445937, autoStart);
}

/**
 * SetListenAddr updates the listen address
 * @param {string} addr
 * @returns {$CancellablePromise<void>}
 */
export function SetListenAddr(addr) {
    return $Call.ByID(3845446712, addr);
}

/**
 * Subscribe sets the event callback
 * @param {any} callback
 * @returns {$CancellablePromise<void>}
 */
export function Subscribe(callback) {
    return $Call.ByID(739470316, callback);
}

/**
 * UpdateMCPServer updates an existing MCP server configuration
 * @param {string} name
 * @param {$models.MCPServerConfig} config
 * @returns {$CancellablePromise<void>}
 */
export function UpdateMCPServer(name, config) {
    return $Call.ByID(539613832, name, config);
}

/**
 * UpdateSettings updates the settings and saves them
 * @param {$models.Settings | null} settings
 * @returns {$CancellablePromise<void>}
 */
export function UpdateSettings(settings) {
    return $Call.ByID(3157594416, settings);
}

// Private type creation functions
const $$createType0 = $models.MCPServerConfig.createFrom;
const $$createType1 = $Create.Array($$createType0);
const $$createType2 = $models.Settings.createFrom;
const $$createType3 = $Create.Nullable($$createType2);
