// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import { Call as $Call, CancellablePromise as $CancellablePromise, Create as $Create } from "@wailsio/runtime";

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as settings$0 from "../settings/models.js";

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as $models from "./models.js";

/**
 * AddMCPServer adds a new MCP server configuration
 */
export function AddMCPServer(config: settings$0.MCPServerConfig): $CancellablePromise<void> {
    return $Call.ByID(1611313896, config);
}

/**
 * GetClientStatus returns the status of all clients
 */
export function GetClientStatus(): $CancellablePromise<{ [_: string]: $models.ClientStatus }> {
    return $Call.ByID(3377848763).then(($result: any) => {
        return $$createType1($result);
    });
}

/**
 * GetSettings returns the current settings
 */
export function GetSettings(): $CancellablePromise<settings$0.Settings | null> {
    return $Call.ByID(3884386303).then(($result: any) => {
        return $$createType3($result);
    });
}

export function IsActive(): $CancellablePromise<boolean> {
    return $Call.ByID(2504495108);
}

export function List(): $CancellablePromise<settings$0.MCPServerConfig[]> {
    return $Call.ByID(287741050).then(($result: any) => {
        return $$createType5($result);
    });
}

export function ListenAddr(): $CancellablePromise<string> {
    return $Call.ByID(707727382);
}

/**
 * ReloadClients reloads all clients from settings
 */
export function ReloadClients(): $CancellablePromise<void> {
    return $Call.ByID(3502122629);
}

/**
 * RemoveMCPServer removes an MCP server configuration
 */
export function RemoveMCPServer(name: string): $CancellablePromise<void> {
    return $Call.ByID(255493505, name);
}

/**
 * RestartClient restarts an MCP client
 */
export function RestartClient(name: string): $CancellablePromise<void> {
    return $Call.ByID(3792849082, name);
}

/**
 * StartClient starts an MCP client
 */
export function StartClient(config: settings$0.MCPServerConfig): $CancellablePromise<void> {
    return $Call.ByID(2765291965, config);
}

/**
 * StopClient stops an MCP client
 */
export function StopClient(name: string): $CancellablePromise<void> {
    return $Call.ByID(2947742357, name);
}

export function Subscribe(callback: any): $CancellablePromise<void> {
    return $Call.ByID(103217282, callback);
}

/**
 * UpdateMCPServer updates an MCP server configuration
 */
export function UpdateMCPServer(name: string, config: settings$0.MCPServerConfig): $CancellablePromise<void> {
    return $Call.ByID(2323123058, name, config);
}

/**
 * UpdateSettings updates the settings
 */
export function UpdateSettings(settings: settings$0.Settings | null): $CancellablePromise<void> {
    return $Call.ByID(3316702090, settings);
}

// Private type creation functions
const $$createType0 = $models.ClientStatus.createFrom;
const $$createType1 = $Create.Map($Create.Any, $$createType0);
const $$createType2 = settings$0.Settings.createFrom;
const $$createType3 = $Create.Nullable($$createType2);
const $$createType4 = settings$0.MCPServerConfig.createFrom;
const $$createType5 = $Create.Array($$createType4);
